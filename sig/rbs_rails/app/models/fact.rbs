class Fact < ::ApplicationRecord
  extend _ActiveRecord_Relation_ClassMethods[Fact, ActiveRecord_Relation, Integer]

  module GeneratedAttributeMethods
    def id: () -> Integer

    def id=: (Integer) -> Integer

    def id?: () -> bool

    def id_changed?: () -> bool

    def id_change: () -> [ Integer?, Integer? ]

    def id_will_change!: () -> void

    def id_was: () -> Integer?

    def id_previously_changed?: () -> bool

    def id_previous_change: () -> Array[Integer?]?

    def id_previously_was: () -> Integer?

    def id_before_last_save: () -> Integer?

    def id_change_to_be_saved: () -> Array[Integer?]?

    def id_in_database: () -> Integer?

    def saved_change_to_id: () -> Array[Integer?]?

    def saved_change_to_id?: () -> bool

    def will_save_change_to_id?: () -> bool

    def restore_id!: () -> void

    def clear_id_change: () -> void

    def fact: () -> String?

    def fact=: (String?) -> String?

    def fact?: () -> bool

    def fact_changed?: () -> bool

    def fact_change: () -> [ String?, String? ]

    def fact_will_change!: () -> void

    def fact_was: () -> String?

    def fact_previously_changed?: () -> bool

    def fact_previous_change: () -> Array[String?]?

    def fact_previously_was: () -> String?

    def fact_before_last_save: () -> String?

    def fact_change_to_be_saved: () -> Array[String?]?

    def fact_in_database: () -> String?

    def saved_change_to_fact: () -> Array[String?]?

    def saved_change_to_fact?: () -> bool

    def will_save_change_to_fact?: () -> bool

    def restore_fact!: () -> void

    def clear_fact_change: () -> void

    def species_id: () -> Integer

    def species_id=: (Integer) -> Integer

    def species_id?: () -> bool

    def species_id_changed?: () -> bool

    def species_id_change: () -> [ Integer?, Integer? ]

    def species_id_will_change!: () -> void

    def species_id_was: () -> Integer?

    def species_id_previously_changed?: () -> bool

    def species_id_previous_change: () -> Array[Integer?]?

    def species_id_previously_was: () -> Integer?

    def species_id_before_last_save: () -> Integer?

    def species_id_change_to_be_saved: () -> Array[Integer?]?

    def species_id_in_database: () -> Integer?

    def saved_change_to_species_id: () -> Array[Integer?]?

    def saved_change_to_species_id?: () -> bool

    def will_save_change_to_species_id?: () -> bool

    def restore_species_id!: () -> void

    def clear_species_id_change: () -> void

    def created_at: () -> ActiveSupport::TimeWithZone

    def created_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

    def created_at?: () -> bool

    def created_at_changed?: () -> bool

    def created_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def created_at_will_change!: () -> void

    def created_at_was: () -> ActiveSupport::TimeWithZone?

    def created_at_previously_changed?: () -> bool

    def created_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def created_at_previously_was: () -> ActiveSupport::TimeWithZone?

    def created_at_before_last_save: () -> ActiveSupport::TimeWithZone?

    def created_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def created_at_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_created_at: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_created_at?: () -> bool

    def will_save_change_to_created_at?: () -> bool

    def restore_created_at!: () -> void

    def clear_created_at_change: () -> void

    def updated_at: () -> ActiveSupport::TimeWithZone

    def updated_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

    def updated_at?: () -> bool

    def updated_at_changed?: () -> bool

    def updated_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def updated_at_will_change!: () -> void

    def updated_at_was: () -> ActiveSupport::TimeWithZone?

    def updated_at_previously_changed?: () -> bool

    def updated_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def updated_at_previously_was: () -> ActiveSupport::TimeWithZone?

    def updated_at_before_last_save: () -> ActiveSupport::TimeWithZone?

    def updated_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def updated_at_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_updated_at: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_updated_at?: () -> bool

    def will_save_change_to_updated_at?: () -> bool

    def restore_updated_at!: () -> void

    def clear_updated_at_change: () -> void

    def fact_i18n: () -> untyped?

    def fact_i18n=: (untyped?) -> untyped?

    def fact_i18n?: () -> bool

    def fact_i18n_changed?: () -> bool

    def fact_i18n_change: () -> [ untyped?, untyped? ]

    def fact_i18n_will_change!: () -> void

    def fact_i18n_was: () -> untyped?

    def fact_i18n_previously_changed?: () -> bool

    def fact_i18n_previous_change: () -> Array[untyped?]?

    def fact_i18n_previously_was: () -> untyped?

    def fact_i18n_before_last_save: () -> untyped?

    def fact_i18n_change_to_be_saved: () -> Array[untyped?]?

    def fact_i18n_in_database: () -> untyped?

    def saved_change_to_fact_i18n: () -> Array[untyped?]?

    def saved_change_to_fact_i18n?: () -> bool

    def will_save_change_to_fact_i18n?: () -> bool

    def restore_fact_i18n!: () -> void

    def clear_fact_i18n_change: () -> void
  end
  include GeneratedAttributeMethods
  def photos: () -> Photo::ActiveRecord_Associations_CollectionProxy
  def photos=: (Photo::ActiveRecord_Associations_CollectionProxy | Array[Photo]) -> (Photo::ActiveRecord_Associations_CollectionProxy | Array[Photo])
  def photo_ids: () -> Array[Integer]
  def photo_ids=: (Array[Integer]) -> Array[Integer]

  def species: () -> Species
  def species=: (Species?) -> Species?
  def reload_species: () -> Species?
  def build_species: (untyped) -> Species
  def create_species: (untyped) -> Species
  def create_species!: (untyped) -> Species
  module GeneratedAssociationMethods
  end
  include GeneratedAssociationMethods

  def self.ordered: () -> ActiveRecord_Relation

  module GeneratedRelationMethods
    def ordered: () -> ActiveRecord_Relation
  end

  class ActiveRecord_Relation < ::ActiveRecord::Relation
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[Fact, Integer]
    include Enumerable[Fact]
  end

  class ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[Fact, Integer]
  end
end
